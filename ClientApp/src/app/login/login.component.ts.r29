import { Component, OnInit } from '@angular/core';
import {FormControl, Validators} from '@angular/forms';
import { LoginService } from "./login.service";
import { first } from "rxjs/operators";
import { Router } from "@angular/router";
import {
  FormGroupDirective,
  NgForm,
  FormGroup,
  FormBuilder,
  FormArray,
  AbstractControl
} from "@angular/forms";
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';


@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  providers: [LoginService],
  styleUrls: ['./login.component.scss']
})

export class LoginComponent implements OnInit {
  loginForm : FormGroup;
  loading = false;
  submitted = false;
    emailFormControl = new FormControl('', [
    Validators.required,
    Validators.email,
  ]);
  


  constructor(
    private loginService: LoginService,
    private router: Router,
    private fb : FormBuilder,
  ) { 
    this.loginForm = new FormGroup({
      email: new FormControl("", [
        Validators.required,
        Validators.email,
      ]),
      //Password: new FormControl("", [Validators.required]),
      Password: new FormControl("", [
        Validators.pattern('^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$'),
        Validators.required,
        Validators.minLength(4),
        Validators.maxLength(8)
      ])

    });
    this.loginForm.valueChanges.subscribe(data => this.onValueChanged(data));
    this.onValueChanged();
  }

  ngOnInit() {

  }

  formErrors={
    'email':'',
  }
  validationMessages={
    'email':{
      'required': 'veuillez entrer votre email',
      'email': 'veuillez entrer un bon email'
    },
    'Password':{
      'required':'veuillez saisir un mot de passe',
      'minlength':'veuillez entrer plus 4 caractères',
      'maxlength':'veuillez entrer moins 8 caractères',
      'pattern' :'veuillez entrer des nombres '
    },
  }

  onValueChanged(data?: any) {
    if (!this.loginForm) {
      return;
    }
    const form = this.loginForm;
    for (const field in this.formErrors) {
      if (Object.prototype.hasOwnProperty.call(this.formErrors, field)) {
        this.formErrors[field] = '';
        const control = form.get(field);
        if (control && control.dirty && !control.valid) {
          const messages = this.validationMessages[field];
          for (const key in control.errors) {
            if (Object.prototype.hasOwnProperty.call(control.errors, key)) {
              this.formErrors[field] += messages[key] + ' ';
            }
          }
        }
      }
    }
  }

  onSubmit() {
    console.log(this.loginForm.value);
    this.submitted = true;
    this.loading = true;
    this.loginService
      .login(this.loginForm.value)
      .pipe(first())
      .subscribe(
        data => {


          if(data["Success"]==true){
            localStorage.setItem('token', data["Results"].token);
            const token = localStorage.getItem('token');
            console.log(data["Results"].token)
            console.log(token)
            console.log(data["Results"].Periode)
            localStorage.setItem('periode', data["Results"].Periode);
            const periode = localStorage.getItem('periode')
            console.log(periode)

            const time_to_login = Date.now()
            localStorage.setItem('timer', JSON.stringify(time_to_login));
            console.log(time_to_login)
            const timer = JSON.parse(localStorage.getItem('timer'));
            console.log(timer)
            console.log(data)
            this.router.navigate(['/dashboard'])
          }else{
            alert(data["Results"])
          }


        },
        error => {
        }
      );
    }

  

    /* loginForm = new FormGroup({
        email: new FormControl("", [
          Validators.required,
          Validators.email,
        ]),
        Password: new FormControl("", [Validators.required]),
      });*/

}
